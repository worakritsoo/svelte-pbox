import {respond} from "@sveltejs/kit/ssr";
import {create_ssr_component, validate_component, missing_component, escape, add_attribute, each} from "svelte/internal";
import {setContext, afterUpdate, onMount} from "svelte";
import {config} from "dotenv";
import mongodb from "mongodb";
var root_svelte_svelte_type_style_lang = "#svelte-announcer.svelte-1j55zn5{position:absolute;left:0;top:0;clip:rect(0 0 0 0);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}";
const css = {
  code: "#svelte-announcer.svelte-1j55zn5{position:absolute;left:0;top:0;clip:rect(0 0 0 0);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}",
  map: `{"version":3,"file":"root.svelte","sources":["root.svelte"],"sourcesContent":["<!-- This file is generated by @sveltejs/kit \u2014 do not edit it! -->\\n<script>\\n\\timport { setContext, afterUpdate, onMount } from 'svelte';\\n\\n\\t// stores\\n\\texport let stores;\\n\\texport let page;\\n\\n\\texport let components;\\n\\texport let props_0 = null;\\n\\texport let props_1 = null;\\n\\texport let props_2 = null;\\n\\n\\tsetContext('__svelte__', stores);\\n\\n\\t$: stores.page.set(page);\\n\\tafterUpdate(stores.page.notify);\\n\\n\\tlet mounted = false;\\n\\tlet navigated = false;\\n\\tlet title = null;\\n\\n\\tonMount(() => {\\n\\t\\tconst unsubscribe = stores.page.subscribe(() => {\\n\\t\\t\\tif (mounted) {\\n\\t\\t\\t\\tnavigated = true;\\n\\t\\t\\t\\ttitle = document.title || 'untitled page';\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tmounted = true;\\n\\t\\treturn unsubscribe;\\n\\t});\\n</script>\\n\\n<svelte:component this={components[0]} {...(props_0 || {})}>\\n\\t{#if components[1]}\\n\\t\\t<svelte:component this={components[1]} {...(props_1 || {})}>\\n\\t\\t\\t{#if components[2]}\\n\\t\\t\\t\\t<svelte:component this={components[2]} {...(props_2 || {})}/>\\n\\t\\t\\t{/if}\\n\\t\\t</svelte:component>\\n\\t{/if}\\n</svelte:component>\\n\\n{#if mounted}\\n\\t<div id=\\"svelte-announcer\\" aria-live=\\"assertive\\" aria-atomic=\\"true\\">\\n\\t\\t{#if navigated}\\n\\t\\t\\tNavigated to {title}\\n\\t\\t{/if}\\n\\t</div>\\n{/if}\\n\\n<style>\\n\\t#svelte-announcer {\\n\\t\\tposition: absolute;\\n\\t\\tleft: 0;\\n\\t\\ttop: 0;\\n\\t\\tclip: rect(0 0 0 0);\\n\\t\\tclip-path: inset(50%);\\n\\t\\toverflow: hidden;\\n\\t\\twhite-space: nowrap;\\n\\t\\twidth: 1px;\\n\\t\\theight: 1px;\\n\\t}\\n</style>"],"names":[],"mappings":"AAsDC,iBAAiB,eAAC,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACnB,SAAS,CAAE,MAAM,GAAG,CAAC,CACrB,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACZ,CAAC"}`
};
const Root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {stores} = $$props;
  let {page} = $$props;
  let {components} = $$props;
  let {props_0 = null} = $$props;
  let {props_1 = null} = $$props;
  let {props_2 = null} = $$props;
  setContext("__svelte__", stores);
  afterUpdate(stores.page.notify);
  let mounted = false;
  let navigated = false;
  let title = null;
  onMount(() => {
    const unsubscribe = stores.page.subscribe(() => {
      if (mounted) {
        navigated = true;
        title = document.title || "untitled page";
      }
    });
    mounted = true;
    return unsubscribe;
  });
  if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0)
    $$bindings.stores(stores);
  if ($$props.page === void 0 && $$bindings.page && page !== void 0)
    $$bindings.page(page);
  if ($$props.components === void 0 && $$bindings.components && components !== void 0)
    $$bindings.components(components);
  if ($$props.props_0 === void 0 && $$bindings.props_0 && props_0 !== void 0)
    $$bindings.props_0(props_0);
  if ($$props.props_1 === void 0 && $$bindings.props_1 && props_1 !== void 0)
    $$bindings.props_1(props_1);
  if ($$props.props_2 === void 0 && $$bindings.props_2 && props_2 !== void 0)
    $$bindings.props_2(props_2);
  $$result.css.add(css);
  {
    stores.page.set(page);
  }
  return `


${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, Object.assign(props_0 || {}), {}, {
    default: () => `${components[1] ? `${validate_component(components[1] || missing_component, "svelte:component").$$render($$result, Object.assign(props_1 || {}), {}, {
      default: () => `${components[2] ? `${validate_component(components[2] || missing_component, "svelte:component").$$render($$result, Object.assign(props_2 || {}), {}, {})}` : ``}`
    })}` : ``}`
  })}

${mounted ? `<div id="${"svelte-announcer"}" aria-live="${"assertive"}" aria-atomic="${"true"}" class="${"svelte-1j55zn5"}">${navigated ? `Navigated to ${escape(title)}` : ``}</div>` : ``}`;
});
function set_paths(paths) {
}
function set_prerendering(value) {
}
var user_hooks = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module"
});
const template = ({head, body}) => '<!DOCTYPE html>\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<meta name="viewport" content="width=device-width, initial-scale=1" />\n		<script type="module" src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic/ionic.esm.js"></script>\n		<script nomodule src="https://cdn.jsdelivr.net/npm/@ionic/core/dist/ionic/ionic.js"></script>\n		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@ionic/core/css/ionic.bundle.css"/>\n		' + head + '\n	</head>\n	<body>\n		\n		<div id="svelte">' + body + "</div>\n	</body>\n</html>\n";
let options = null;
function init(settings) {
  set_paths(settings.paths);
  set_prerendering(settings.prerendering || false);
  options = {
    amp: false,
    dev: false,
    entry: {
      file: "/./_app/start-da56c387.js",
      css: ["/./_app/assets/start-a8cd1609.css"],
      js: ["/./_app/start-da56c387.js", "/./_app/chunks/vendor-9ec011bc.js"]
    },
    fetched: void 0,
    floc: false,
    get_component_path: (id) => "/./_app/" + entry_lookup[id],
    get_stack: (error2) => String(error2),
    handle_error: (error2) => {
      console.error(error2.stack);
      error2.stack = options.get_stack(error2);
    },
    hooks: get_hooks(user_hooks),
    hydrate: true,
    initiator: void 0,
    load_component,
    manifest,
    paths: settings.paths,
    read: settings.read,
    root: Root,
    router: true,
    ssr: true,
    target: "#svelte",
    template
  };
}
const d = decodeURIComponent;
const empty = () => ({});
const manifest = {
  assets: [],
  layout: "src/routes/$layout.svelte",
  error: ".svelte/build/components/error.svelte",
  routes: [
    {
      type: "page",
      pattern: /^\/$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/index.svelte"],
      b: [".svelte/build/components/error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/blogs\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/blogs/index.svelte"],
      b: [".svelte/build/components/error.svelte"]
    },
    {
      type: "endpoint",
      pattern: /^\/blogs\/([^/]+?)\/?$/,
      params: (m) => ({slug: d(m[1])}),
      load: () => Promise.resolve().then(function() {
        return _slug_$1;
      })
    },
    {
      type: "page",
      pattern: /^\/posts\/?$/,
      params: empty,
      a: ["src/routes/$layout.svelte", "src/routes/posts/index.svelte"],
      b: [".svelte/build/components/error.svelte"]
    },
    {
      type: "endpoint",
      pattern: /^\/posts\/([^/]+?)\/?$/,
      params: (m) => ({slug: d(m[1])}),
      load: () => Promise.resolve().then(function() {
        return _slug_;
      })
    }
  ]
};
const get_hooks = (hooks) => ({
  getContext: hooks.getContext || (() => ({})),
  getSession: hooks.getSession || (() => ({})),
  handle: hooks.handle || (({request, render: render2}) => render2(request))
});
const module_lookup = {
  "src/routes/$layout.svelte": () => Promise.resolve().then(function() {
    return $layout$1;
  }),
  ".svelte/build/components/error.svelte": () => Promise.resolve().then(function() {
    return error;
  }),
  "src/routes/index.svelte": () => Promise.resolve().then(function() {
    return index$2;
  }),
  "src/routes/blogs/index.svelte": () => Promise.resolve().then(function() {
    return index$1;
  }),
  "src/routes/posts/index.svelte": () => Promise.resolve().then(function() {
    return index;
  })
};
const metadata_lookup = {"src/routes/$layout.svelte": {entry: "/./_app/pages/$layout.svelte-e46fd07e.js", css: [], js: ["/./_app/pages/$layout.svelte-e46fd07e.js", "/./_app/chunks/vendor-9ec011bc.js"], styles: null}, ".svelte/build/components/error.svelte": {entry: "/./_app/error.svelte-5abc2c78.js", css: [], js: ["/./_app/error.svelte-5abc2c78.js", "/./_app/chunks/vendor-9ec011bc.js"], styles: null}, "src/routes/index.svelte": {entry: "/./_app/pages/index.svelte-01222d9a.js", css: [], js: ["/./_app/pages/index.svelte-01222d9a.js", "/./_app/chunks/vendor-9ec011bc.js"], styles: null}, "src/routes/blogs/index.svelte": {entry: "/./_app/pages/blogs/index.svelte-d75c0b20.js", css: [], js: ["/./_app/pages/blogs/index.svelte-d75c0b20.js", "/./_app/chunks/vendor-9ec011bc.js"], styles: null}, "src/routes/posts/index.svelte": {entry: "/./_app/pages/posts/index.svelte-9c48af13.js", css: [], js: ["/./_app/pages/posts/index.svelte-9c48af13.js", "/./_app/chunks/vendor-9ec011bc.js"], styles: null}};
async function load_component(file) {
  return {
    module: await module_lookup[file](),
    ...metadata_lookup[file]
  };
}
init({paths: {base: "", assets: "/."}});
function render(request, {
  prerender
} = {}) {
  const host = request.headers["host"];
  return respond({...request, host}, options, {prerender});
}
const {MongoClient} = mongodb;
config().dotenv;
const {MONGODB_URI, MONGODB_DB} = process.env;
if (!MONGODB_URI) {
  throw new Error("Please define the MONGODB_URI environment variable inside .env.local");
}
if (!MONGODB_DB) {
  throw new Error("Please define the MONGODB_DB environment variable inside .env.local");
}
let cached = global.mongo;
if (!cached) {
  cached = global.mongo = {conn: null, promise: null};
}
async function connectToDatabase() {
  if (cached.conn) {
    return cached.conn;
  }
  if (!cached.promise) {
    const opts = {
      useNewUrlParser: true,
      useUnifiedTopology: true
    };
    cached.promise = MongoClient.connect(MONGODB_URI, opts).then((client) => {
      return {
        client,
        db: client.db(MONGODB_DB)
      };
    });
  }
  cached.conn = await cached.promise;
  return cached.conn;
}
async function get$1({params}) {
  const {slug} = params;
  const dbConnection = await connectToDatabase();
  const db = dbConnection.db;
  db.collection("posts");
  return {
    status: 200,
    body: {
      posts: `Hellowolrd + ${slug}`
    }
  };
}
var _slug_$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  get: get$1
});
async function get(request) {
  try {
    const dbConnection = await connectToDatabase();
    const db = dbConnection.db;
    const collection = db.collection("posts");
    const posts = await collection.find().toArray();
    return {
      status: 200,
      body: {
        posts
      }
    };
  } catch (error2) {
    return {
      status: 500,
      body: {
        error: "A server error occured"
      }
    };
  }
}
async function post(request) {
  try {
    const dbConnection = await connectToDatabase();
    const db = dbConnection.db;
    const collection = db.collection("posts");
    const post2 = JSON.parse(request.body);
    await collection.insertOne(post2);
    return {
      status: 200,
      body: {
        status: "Success"
      }
    };
  } catch (error2) {
    return {
      status: 500,
      body: {
        error: "A server error occured"
      }
    };
  }
}
var _slug_ = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  get,
  post
});
const $layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<body><ion-split-pane content-id="${"menu-content"}" when="${"lg"}"><ion-menu content-id="${"menu-content"}" side="${"start"}" type="${"overlay"}"><ion-header><ion-toolbar><ion-title>Awesome avocado menu</ion-title></ion-toolbar></ion-header>
			<ion-content><nav><a href="${"."}">Home</a>|
					<a href="${"blogs"}">Blogs</a>|
					<a href="${"posts"}">Post</a>|
				</nav></ion-content></ion-menu>
		<ion-content id="${"menu-content"}">${slots.default ? slots.default({}) : ``}</ion-content></ion-split-pane></body>`;
});
var $layout$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: $layout
});
function load$2({error: error2, status}) {
  return {props: {error: error2, status}};
}
const Error$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {status} = $$props;
  let {error: error2} = $$props;
  if ($$props.status === void 0 && $$bindings.status && status !== void 0)
    $$bindings.status(status);
  if ($$props.error === void 0 && $$bindings.error && error2 !== void 0)
    $$bindings.error(error2);
  return `<h1>${escape(status)}</h1>

<p>${escape(error2.message)}</p>


${error2.stack ? `<pre>${escape(error2.stack)}</pre>` : ``}`;
});
var error = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Error$1,
  load: load$2
});
async function load$1({fetch}) {
  const res = await fetch("/blogs");
  const jsonRes = await res.json();
  return {props: {posts: jsonRes.posts}};
}
const Routes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {posts} = $$props;
  console.log(posts);
  let Name = "";
  let url = "";
  let details = "";
  let tags = [
    "\u0E2B\u0E19\u0E48\u0E27\u0E22\u0E07\u0E32\u0E19",
    "\u0E40\u0E01\u0E35\u0E48\u0E22\u0E27\u0E01\u0E31\u0E1A\u0E1E\u0E19\u0E31\u0E01\u0E07\u0E32\u0E19",
    "\u0E40\u0E27\u0E47\u0E1A/\u0E41\u0E2D\u0E1E \u0E23\u0E30\u0E1A\u0E1A\u0E07\u0E32\u0E19",
    "\u0E04\u0E39\u0E48\u0E21\u0E37\u0E2D\u0E01\u0E32\u0E23\u0E43\u0E0A\u0E49\u0E07\u0E32\u0E19\u0E23\u0E30\u0E1A\u0E1A",
    "Dashboard",
    "\u0E2D\u0E23\u0E23\u0E16\u0E1B\u0E23\u0E30\u0E42\u0E22\u0E0A\u0E19\u0E4C \u0E2D\u0E37\u0E48\u0E19\u0E46 "
  ];
  let selected_tag;
  if ($$props.posts === void 0 && $$bindings.posts && posts !== void 0)
    $$bindings.posts(posts);
  return `<form><input type="${"text"}" placeholder="${"Name"}"${add_attribute("value", Name, 1)}><br>
	<input type="${"text"}" placeholder="${"Url"}"${add_attribute("value", url, 1)}><br>
	<input type="${"text"}" placeholder="${"Details"}"${add_attribute("value", details, 1)}><br>

	<select${add_attribute("value", selected_tag, 1)}>${each(tags, (tag) => `<option value="${"\n				" + escape(tag) + " \n			"}">${escape(tag)} 
			</option>`)}</select>
	${escape(selected_tag)}
	<ion-button ${"disabled"}>\u0E40\u0E1E\u0E34\u0E48\u0E21</ion-button></form>
<section></section>`;
});
var index$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Routes,
  load: load$1
});
const Blogs = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `


Blogs

${slots.default ? slots.default({}) : ``}`;
});
var index$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Blogs
});
async function load({fetch}) {
  const res = await fetch("/posts/");
  const jsonRes = await res.json();
  return {props: {posts: jsonRes.posts}};
}
const Posts = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {posts} = $$props;
  console.log(posts);
  if ($$props.posts === void 0 && $$bindings.posts && posts !== void 0)
    $$bindings.posts(posts);
  return `${each(posts, (post2) => `
     <ion-card><ion-card-header><ion-card-title>${escape(post2.Name)}</ion-card-title>
             <ion-card-subtitle>${escape(post2.url)}</ion-card-subtitle></ion-card-header>
         <ion-card-content>${escape(JSON.stringify(post2.details))}</ion-card-content>
     </ion-card>`)}




`;
});
var index = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  default: Posts,
  load
});
export {init, render};
